#!/hive/sbin/bash


readonly script_mission='Client for ASICs: Hourly Controller'
readonly script_version='1.1.1'
readonly script_basename="$( basename "$0" )"


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

print_script_version() {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

print_script_usage() {
	echo -e "Usage: ${CYAN-}${script_basename} [log]${NOCOLOR-}"
	echo
	echo -e "	${WHITE-}log${NOCOLOR-}"
	echo -e "		prints last $log_lines lines from its own log"
	echo
}

print_last_lines_from_log () {
	if [[ -s "$log_file" ]]; then
		tail -n "$log_lines" "$log_file"
	fi
}

parse_arguments () {
	case "${1-}" in
		'log')
			print_script_version
			print_last_lines_from_log
			exit 0
			;;
		'')
			: 'do nothing special'
			;;
		*)
			print_script_version
			print_script_usage
			exit 0
			;;
	esac
}

print_log_entry () {
	#
	# print_log_entry 'event_type' 'log_message'
	#

	local event_type="${1-<undefined>}"
	local log_message="${2-<undefined>}"

	printf '%(%F %T)T %-9.9s %b\n' -1 "[${event_type^^}]" "$log_message"
}

drop_caches () {
	sync && echo 3 > /proc/sys/vm/drop_caches
}

wipe_memory () {
	drop_caches
	du -h /tmp/* /var/log/ | grep -F 'M' | awk '{print $2}' | tee >( xargs rm )
}

truncate_logs () {
	local file=''

	for file in /var/log/* /tmp/*.log /hive-config/*.log /config/*.log; do
		if [[ -e $file && "$( wc -l "$file" | cut -d' ' -f1 )" -gt 1000 ]]; then
			print_log_entry 'info' "Truncate log: $file"
			echo "$( tail -n 1000 "$file" )" > "$file"
		fi
	done
}

check_for_1970_year () {
	local -i -r current_year="$( date +"%Y" )"
	local -i date_from_server=0

	if (( current_year == 1970 )); then
		if [[ -z ${HIVE_HOST_URL-} ]]; then
			HIVE_HOST_URL='http://api.hiveos.farm'
		fi
		date_from_server="$( curl -I "$HIVE_HOST_URL" 2>&1 | grep -F 'Date:' | cut -d' ' -f3-6 | timetran )"
		print_log_entry 'info' "System date is 1970. Get actual date from server: $( date -s "@$date_from_server" )"
	fi
}

check_for_free_memory () {
	local -r -i low_memory_limit=5000
	local -r -i top_lines_count=10
	local free_memory="$( cat /proc/meminfo | grep -Fi 'memfree' | sed 's/[^0-9]//g' )"
	local print_top=''

	if (( free_memory < low_memory_limit )); then
		print_log_entry 'warning' "Memory low: $free_memory Mb"
		print_top="$( top -b -n1 | head -n "$top_lines_count" )"
		echo -e "$print_top" | tee >( message warn "Low memory detected, trying to clean the logs" payload; echo )

		wipe_memory
		truncate_logs
	fi
}

check_for_updated_build_version () {
	local new_build_version=''
	local previous_build_version=''

	if ! cmp -s /hive/etc/build /hive-config/build; then
		new_build_version="$( cat /hive/etc/VERSION )-$( cat /hive/etc/build 2> /dev/null || echo 'release' )"
		previous_build_version="$( cat /hive/etc/VERSION )-$( cat /hive-config/build 2> /dev/null || echo 'release' )"
		cp -rf /hive/etc/build /hive-config/build

		print_log_entry 'info' "Client updated from $previous_build_version to $new_build_version"
		message ok "Client: updated from $previous_build_version to $new_build_version"
		echo
	fi
}

check_for_virii () {
	if ! which virus-check > /dev/null; then
		print_log_entry 'warning' "'virus-check' program not found"
		return
	fi
	
	local virus_report=''
	local -i is_virus_found=0

	virus_report="$( virus-check )"
	is_virus_found=$?

	if (( is_virus_found )); then
		print_log_entry 'warning' 'Virus found!'
		if (( ! message_about_virus_was_sent )); then
			echo -e "$virus_report" | tee >( message err 'Virus found!' payload; echo )
			if (( assign_tag_to_worker )); then
				message tag 'virus found'
				echo
			fi
			message_about_virus_was_sent=1
		fi
	fi
}


# global consts

declare -i -r assign_tag_to_worker=1
declare -i -r log_lines=100
declare -r log_file='/config/hive-controller.log'

# global vars

declare -i minute_counter=0
declare -i message_about_virus_was_sent=0
declare check_function=''


# global sources

[[ -s /hive/bin/asic-model ]] && source asic-model
[[ -s /hive-config/rig.conf ]] && source /hive-config/rig.conf


# global exports

export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib


# main()

#TODO:
#logs problem
#watchdog alert
#pool checks
#DNS checks
#wd
#check read only nvdata and config

parse_arguments "$@"
print_log_entry 'start' 'Controller started'

while true; do
	# execute check_for_* functions in alphabetical order
	for check_function in $( compgen -A function 'check_for_' | sort ); do
		"$check_function"
	done

	sleep 60

#	drop_caches

	(( minute_counter % 10 == 0 )) && /hive/bin/agent-screen dontattach	# cron agent every 10m
	(( minute_counter == 59 )) && /hive/bin/cache-hive-ip > /dev/null	# cron cache-hive-ip on 59m
	(( minute_counter >= 60 ? minute_counter=0 : minute_counter++ ))	# clear counter every 60m
done
