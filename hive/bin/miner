#!/hive/sbin/bash

MINER_LOGS_BASE_DIR=/var/log/miner
#ASIC_MODEL=`sed -n 2p /usr/bin/compile_time`
MINER="asicminer"

. asic-model

function usage() {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname start|stop|restart|log|tuning|config|config-gen${NOCOLOR}"
	echo -e "If you run ${CYAN}$bname${NOCOLOR} without parameters miner screen will be tried to resume."
}


RIG_CONF="/hive-config/rig.conf"
WALLET_CONF="/hive-config/wallet.conf"

#[ -t 1 ] &&
. colors

#[ -z $1 ] && usage && exit 1


if [ ! -f $RIG_CONF ]; then
	echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
	#exit 1
else
	. $RIG_CONF
fi


[[ -e $WALLET_CONF ]] && . $WALLET_CONF

[ -z $MINER ] && MINER="asicminer" && echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"asicminer\"${NOCOLOR}"

#sgminer-gm is deprecated...
miners_avail=("asicminer")
if ! printf '%s\n' "${miners_avail[@]}" | grep -Eq '^'$MINER'$' ; then
	echo -e "${RED}Please apply Flight Sheet to start mining ${NOCOLOR}"
	message warn "Please apply Flight Sheet to start mining"
	exit 1
fi


########################################################################################################################

dmesg_asic_timestamps() {
	FORMAT="%F %T"
	now=$(date +%s)
	cputime_line=$(grep -m1 "\.clock" /proc/sched_debug)

	if [[ $cputime_line =~ [^0-9]*([0-9]*).* ]]; then
		cputime=$((BASH_REMATCH[1] / 1000))
	fi
	dmesg | while IFS= read -r line; do
		if [[ $line =~ ^\[\ *([0-9]+)\.[0-9]+\]\ (.*) ]]; then
			stamp=$((now-cputime+BASH_REMATCH[1]))
			echo "$(date +"${FORMAT}" --date=@${stamp}) ${BASH_REMATCH[2]}"
		else
			echo "$line"
		fi
	done
}


function config-gen() {
	/hive/bin/asicminer-config
}


function start() {
	echo -e "Starting ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	if [[ $HIVEON_VER == "1.02" ]]; then
		config-gen
		rm -f /tmp/norespawn
	else
		for i in {1..15}; do
			test_miner="$(ps | grep -e bmminer -e cgminer -e single-board-test | grep -v 'grep' | grep -v 'systemctl')"
			if [ -z "$test_miner" ] ; then
				config-gen
				screen -d > /dev/null
				if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" ]]; then
					systemctl start cgminer.service
				elif [[ "$ASIC_MODEL" == "t3h+.soc" || "$ASIC_MODEL" == "t3+.soc" || "$ASIC_MODEL" == "t2th+.soc" || "$ASIC_MODEL" == "t2thf+.soc" || "$ASIC_MODEL" == "t2thl+.soc" || "$ASIC_MODEL" == "t2th.soc" || "$ASIC_MODEL" == "t2tz.soc" || "$ASIC_MODEL" == "t2thm.soc" || "$ASIC_MODEL" == "t2thf.soc" || "$ASIC_MODEL" == "t2t+.soc" || "$ASIC_MODEL" == "t2ts.soc" || "$ASIC_MODEL" == "t2ti.soc" || "$ASIC_MODEL" == "t2t.soc" ]]; then
					systemctl start cgminer.service
					#timeout -t 600 /hive/bin/inno_api updatePools
					timeout -t 600 /hive/bin/inno_api updateFanspeed
					timeout -t 600 /hive/bin/inno_api setAutoTune
				elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
					break
				elif [[ $ASIC_MODEL == "T4.G19" ]]; then
					python3.4 /home/inno_tools/start_miner.py &
				else
					nohup /etc/init.d/$THIS_MINER_NAME.sh start > /dev/null 2>&1 &
				fi
				break
			fi
			sleep 1
		done
	fi
	echo "";
}

function stop() {
	echo -e "Stopping ${CYAN}$MINER${NOCOLOR}"
	if [[ $HIVEON_VER == "1.02" ]]; then
		echo "ok" > /tmp/norespawn
	else
		if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" || "$ASIC_MODEL" == "t3h+.soc" || "$ASIC_MODEL" == "t3+.soc" || "$ASIC_MODEL" == "t2th+.soc" || "$ASIC_MODEL" == "t2thf+.soc" || "$ASIC_MODEL" == "t2thl+.soc" || "$ASIC_MODEL" == "t2th.soc" || "$ASIC_MODEL" == "t2tz.soc" || "$ASIC_MODEL" == "t2thm.soc" || "$ASIC_MODEL" == "t2thf.soc" || "$ASIC_MODEL" == "t2t+.soc" || "$ASIC_MODEL" == "t2ts.soc" || "$ASIC_MODEL" == "t2ti.soc" || "$ASIC_MODEL" == "t2t.soc" ]]; then
			systemctl stop cgminer.service
		elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
			pidof miner | xargs kill -9
		elif [[ $ASIC_MODEL == "T4.G19" ]]; then
			killall innominer_T4
		else
			/etc/init.d/$THIS_MINER_NAME.sh stop
		fi
	fi
}

function restart() {
	echo -e "${YELLOW}Restarting miner${NOCOLOR}" #can be different on miner change
	if [[ $HIVEON_VER == "1.02" ]]; then
		config-gen
		rm -f /tmp/norespawn
		echo "ok" > /config/restart
	else
		stop
		start
	fi
}

function miner_log_basename() {
	local miner=$1
	[[ -z $miner ]] && echo "No miner given to miner_log_basename" && return 1

	if [ ! -z $LOG_PATH ]; then
		log_basename="${LOG_PATH}"
	else
		log_basename=""
		echo "Unknown asic $ASIC_MODEL to miner_log_basename"
		return 1
	fi

	echo $log_basename
	return 0
}

function log_tail() {
	local TAIL_LINE=80

	if [[ ! -z $HIVEON_VER ]]; then
		sh /www/pages/cgi-bin/get_kernel_log.cgi | tail -n $TAIL_LINE
	else
		log_basename=`miner_log_basename $MINER`
		if [[ $ASIC_MODEL =~ ".g19" ]]; then
			journalctl -n $TAIL_LINE
		else
			#logname="${log_basename}.log"
			logname="${log_basename}"

			if [[ ! -e $logname ]]; then
				echo "Log $logname does not exist yet"
				return
			fi

			if [[ `ls -l $logname | awk '{print $5}'` -le 1 ]]; then #can be 1, empty line
				echo "Log $logname is empty"
				return
			fi


			echo -e "${YELLOW}=== $logname last $TAIL_LINE lines =================================================${NOCOLOR}"
			echo "Last modified `stat -c %y $logname`"
			echo ""
			#tail -n $TAIL_LINE $logname | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" #sed removes colors
			tail -n $TAIL_LINE $1 $logname
		fi
	fi
}


function echo_config_file() {
	echo -e "${YELLOW}=== $1 =================================================${NOCOLOR}"
	cat $1
	echo ""
}

#Shows miner config
function config() {
	logname=""
	if [ ! -z $CONFIG_PATH ]; then
		echo_config_file "${CONFIG_PATH}"
	else
		echo "Unknown model $ASIC_MODEL"
		return
	fi
}



# Sets MINER to MINER2 if requested
function check_second_miner {
	[[ -z $1 || $1 != "2" ]] && return #not a second miner request

	[[ $1 == "2" && -z $MINER2 ]] &&
	echo "No second miner configured" &&
	exit 1

	MINER=$MINER2 #substitute MINER var with second miner
}


########################################################################################################################

case $1 in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	config)
		config
		;;
	config-gen)
		config-gen
		;;
	log) # supports args for tail
		log_tail $2 $3 $4
		;;
	kernel-log) #temp. TODO miner log [kernel|tuning|watchdog|all [filter=regex_pattern] [sort=none|date]]
		dmesg_asic_timestamps
		;;
	tuning)
		sh /www/pages/cgi-bin/get_auto_tune_log.cgi || sh /www/pages/cgi-bin/get_tune_log.cgi
		;;
	*)
		screen -x -S miner
		[[ $? != 0 ]] && usage
		;;
esac
