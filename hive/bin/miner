#!/hive/sbin/bash

MINER_LOGS_BASE_DIR='/var/log/miner'
#ASIC_MODEL=`sed -n 2p /usr/bin/compile_time`
MINER='asicminer'

. asic-model

function script_usage {
	bname=`basename $0`
	echo -e "Usage: ${CYAN}$bname start|stop|restart|log|tuning|config|config-gen${NOCOLOR}"
	echo -e "If you run ${CYAN}$bname${NOCOLOR} without parameters miner screen will be tried to resume."
}


RIG_CONF="/hive-config/rig.conf"
WALLET_CONF="/hive-config/wallet.conf"

#[[ -t 1 ]] &&
. colors

#[[ -z $1 ]] && script_usage && exit 1


if [[ ! -f $RIG_CONF ]]; then
	echo -e "${RED}Config file $RIG_CONF not found${NOCOLOR}"
	#exit 1
else
	. "$RIG_CONF"
fi


[[ -e $WALLET_CONF ]] && . "$WALLET_CONF"

[[ -z $MINER ]] && MINER="asicminer" && echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"asicminer\"${NOCOLOR}"

#sgminer-gm is deprecated...
miners_avail=("asicminer")
if ! printf '%s\n' "${miners_avail[@]}" | grep -Eq '^'$MINER'$' ; then
	echo -e "${RED}Please apply Flight Sheet to start mining ${NOCOLOR}"
	message warn "Please apply Flight Sheet to start mining"
	exit 1
fi


########################################################################################################################

function print_kernel_log {
	#FORMAT="%F %T"
	#now=$(date +%s)
	printf -v now '%(%s)T' -1

	if [[ -e /proc/sched_debug ]]; then
		cputime_line=$(grep -F -m 1 '\.clock' /proc/sched_debug)
		if [[ $cputime_line =~ [^0-9]*([0-9]*).* ]]; then
			cputime=$(( BASH_REMATCH[1] / 1000 ))
		fi
	else
		boot_time_line=( $( grep -F -m 1 'btime' /proc/stat ) )
		cputime=$(( now - boot_time_line[1] ))
	fi
	
	dmesg | while IFS= read -r -t 0.1 line; do
		if [[ $line =~ ^\[\ *([0-9]+)\.[0-9]+\]\ (.*) ]]; then
			stamp=$(( now - cputime + BASH_REMATCH[1] ))
			printf '%(%F %T)T %s\n' "$stamp" "${BASH_REMATCH[2]}"
			#echo "$(date +"${FORMAT}" --date=@${stamp}) ${BASH_REMATCH[2]}"
		else
			echo "$line"
		fi
	done
}

function config-gen {
	/hive/bin/asicminer-config
}


function start {
	echo -e "Starting ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		config-gen
		rm -f /tmp/norespawn
	elif [ -e "/www/pages/cgi-bin/resume_miner.cgi" ]; then
		sh /www/pages/cgi-bin/resume_miner.cgi
	else
		for i in {1..15}; do
			test_miner="$(ps | grep -e bmminer -e cgminer -e single-board-test | grep -v 'grep' | grep -v 'systemctl')"
			if [[ -z $test_miner ]] ; then
				config-gen
				screen -d > /dev/null
				if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" ]]; then
					systemctl start cgminer.service
				elif [[ $ASIC_MODEL == "t3h+.soc" || $ASIC_MODEL == "t3+.soc" || $ASIC_MODEL == "t2th+.soc" || $ASIC_MODEL == "t2thf+.soc" || $ASIC_MODEL == "t2thl+.soc" || $ASIC_MODEL == "t2th.soc" || $ASIC_MODEL == "t2tz.soc" || $ASIC_MODEL == "t2thm.soc" || $ASIC_MODEL == "t2thf.soc" || $ASIC_MODEL == "t2t+.soc" || $ASIC_MODEL == "t2ts.soc" || $ASIC_MODEL == "t2ti.soc" || $ASIC_MODEL == "t2t.soc" ]]; then
					systemctl start cgminer.service
					#timeout -t 600 /hive/bin/inno_api updatePools
					timeout -t 600 /hive/bin/inno_api updateFanspeed
					timeout -t 600 /hive/bin/inno_api setAutoTune
				elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
					break
				elif [[ $ASIC_MODEL == "T4.G19" ]]; then
					python3.4 /home/inno_tools/start_miner.py &
				elif [[ $ASIC_MODEL == "Toddminer C1" ]]; then
					/home/sm/miner/build/miner.sh &
				else
					nohup /etc/init.d/$THIS_MINER_NAME.sh start > /dev/null 2>&1 &
				fi
				break
			fi
			sleep 1
		done
	fi
	echo
}

function stop {
	echo -e "Stopping ${CYAN}$MINER${NOCOLOR}"
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		echo "ok" > /tmp/norespawn
	elif [[ -e "/www/pages/cgi-bin/stop_miner.cgi" ]]; then
		sh /www/pages/cgi-bin/stop_miner.cgi
	else
		if [[ $ASIC_MODEL =~ ".g19" || $ASIC_MODEL == "t3.soc" || $ASIC_MODEL == "t3h+.soc" || $ASIC_MODEL == "t3+.soc" || $ASIC_MODEL == "t2th+.soc" || $ASIC_MODEL == "t2thf+.soc" || $ASIC_MODEL == "t2thl+.soc" || $ASIC_MODEL == "t2th.soc" || $ASIC_MODEL == "t2tz.soc" || $ASIC_MODEL == "t2thm.soc" || $ASIC_MODEL == "t2thf.soc" || $ASIC_MODEL == "t2t+.soc" || $ASIC_MODEL == "t2ts.soc" || $ASIC_MODEL == "t2ti.soc" || $ASIC_MODEL == "t2t.soc" ]]; then
			systemctl stop cgminer.service
		elif [[ $ASIC_MODEL =~ "Zig Z1" ]]; then
			pidof miner | xargs kill -9
		elif [[ $ASIC_MODEL == "T4.G19" ]]; then
			killall innominer_T4
		elif [[ $ASIC_MODEL == "Toddminer C1" ]]; then
			echo "Miner stop not implemented yet"
		else
			/etc/init.d/$THIS_MINER_NAME.sh stop
		fi
	fi
}

function restart {
	echo -e "${YELLOW}Restarting miner${NOCOLOR}" #can be different on miner change
	if [[ -e "/sbin/watchdog_restart.pl" ]]; then
		config-gen
		rm -f /tmp/norespawn
		echo "ok" > /config/restart
	elif [ -e "/www/pages/cgi-bin/restart_miner.cgi" ]; then
		sh /www/pages/cgi-bin/restart_miner.cgi
	else
		stop
		start
	fi
}

function miner_log_basename {
	local miner="$1"
	[[ -z $miner ]] && echo "No miner given to miner_log_basename" && return 1

	if [[ ! -z $LOG_PATH ]]; then
		log_basename="${LOG_PATH}"
	else
		log_basename=""
		echo "Unknown asic $ASIC_MODEL to miner_log_basename"
		return 1
	fi

	echo "$log_basename"
	return 0
}

function log_tail {
	local TAIL_LINE=80
	if [[ ! -z $HIVEON_VER ]]; then
		sh /www/pages/cgi-bin/get_kernel_log.cgi | tail -n $TAIL_LINE
	else
		log_basename=`miner_log_basename $MINER`
		if [[ $ASIC_MODEL =~ ".g19" ]]; then
			journalctl -n $TAIL_LINE
		else
			#logname="${log_basename}.log"
			logname="${log_basename}"

			if [[ ! -e $logname ]]; then
				echo "Log $logname does not exist yet"
				return
			fi

			if [[ `ls -l $logname | awk '{print $5}'` -le 1 ]]; then #can be 1, empty line
				echo "Log $logname is empty"
				return
			fi


			echo -e "${YELLOW}=== $logname last $TAIL_LINE lines =================================================${NOCOLOR}"
			echo "Last modified `stat -c %y $logname`"
			echo ""
			#tail -n $TAIL_LINE $logname | sed "s,$(printf '\033')\\[[0-9;]*[a-zA-Z],,g" #sed removes colors
			tail -n $TAIL_LINE $1 $logname
		fi
	fi
}

function echo_config_file {
	echo -e "${YELLOW}=== $1 =================================================${NOCOLOR}"
	cat $1
	echo ""
}

function config {
	# shows miner config
	logname=""
	if [[ ! -z $CONFIG_PATH ]]; then
		echo_config_file "${CONFIG_PATH}"
	else
		echo "Unknown model $ASIC_MODEL"
		return
	fi
}

function check_second_miner {
	# sets MINER to MINER2 if requested
	[[ -z $1 || $1 != "2" ]] && return #not a second miner request

	[[ $1 == "2" && -z $MINER2 ]] &&
	echo "No second miner configured" &&
	exit 1

	MINER="$MINER2" #substitute MINER var with second miner
}

function print_tune_log {
	local tune_log_script
	for tune_log_script in '/www/pages/cgi-bin/get_auto_tune_log.cgi' '/www/pages/cgi-bin/get_tune_log.cgi'; do
		if [[ -s "$tune_log_script" ]]; then
			sh "$tune_log_script"
		fi
	done
}

########################################################################################################################

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	config)
		config
		;;
	config-gen)
		config-gen
		;;
	log) # supports args for tail
		case "$2" in
			'kernel')
				print_kernel_log
				;;
			'tuning')
				print_tune_log
				;;
			'watchdog')
				[[ -s /config/watchdog.log ]] && tail -n 80 /config/watchdog.log
				;;
			*)
				log_tail $2 $3 $4
				;;
		esac
		;;
	kernel-log) #temp. TODO miner log [kernel|tuning|watchdog|all [filter=regex_pattern] [sort=none|date]]
		print_kernel_log
		;;
	tuning)
		print_tune_log
		;;
	*)
		screen -x -S bmminer > /dev/null ||
			screen -x -S cgminer /dev/null ||
				script_usage
		;;
esac
