#!/bin/sh


readonly script_mission='Hive OS Client for ASICs: Upgrade from Hive repository'
readonly script_version='0.13.3'


[ -s /hive/bin/colors ] && source /hive/bin/colors


# functions

print_script_version () {
	echo -e "${YELLOW}${script_mission}, version ${script_version}${NOCOLOR}"
	echo
}

print_script_usage () {
	basename="$( basename "$0" )"
	echo -e "Usage examples: ${CYAN}${basename}${NOCOLOR}                - update to the latest release version"
	echo -e "                ${CYAN}${basename} --force${NOCOLOR}        - force update to the latest release version"
	echo -e "                ${CYAN}${basename} 0.1-13${NOCOLOR}         - update to release 0.1-13"
	echo -e "                ${CYAN}${basename} 0.1-13 --force${NOCOLOR} - force update to release 0.1-13"
	echo -e "                ${CYAN}${basename} master${NOCOLOR}         - force update to the latest stable dev build (beta)"
	echo -e "                ${CYAN}${basename} master dev347${NOCOLOR}  - force update to the latest stable dev build (beta), but do nothing if local build is the same as dev347"
	echo -e "                ${CYAN}${basename} master github${NOCOLOR}  - force update Antminer Series 15/17 or S9k/S9SE to the night build from Github (alpha)"
	echo
}

get_asic_model () {
	local ASIC_MODEL

	# Antminer
	if [ -s /usr/bin/compile_time ]; then
		ASIC_MODEL="$( sed -n 2p /usr/bin/compile_time )"
	fi

	# Ebit
	if [ -e /opt/system/bank.conf ]; then
		ASIC_MODEL='ebit'
	fi

	#Innosilicon
	if [ -s /etc/hwrevision ]; then
		ASIC_MODEL="$( cut -d\  -f 2 /etc/hwrevision )"
	fi

	# Zig old firmware
	if [ -s /var/www/html/src/Template/Layout/signin.twig ]; then
		ASIC_MODEL="$(
			(
				grep -F -e 'Zig' -- /var/www/html/src/Template/Layout/signin.twig ||
				grep -F -e 'Zig' -- /var/www/html/src/Template/Users/login.twig
			) |
				grep 'title\|<a><b>' | sed 's/<[^>]*>//g' | sed 's/\ *//'
		)"
	fi

	# Zig new firmware
	if [ -s /var/www/html/src/Template/Layout/signin.twig ] && [ -s /var/www/html/TYPE ]; then
		ASIC_MODEL=$(echo "$ASIC_MODEL" | sed s/"{{ type() }}"/$(cat /var/www/html/TYPE)/)
	fi

	# Innosilicon A5/8
	if [ -e /tmp/type ] && [ ! -e /etc/hwrevision ]; then
		ASIC_MODEL="$( cat /tmp/type ).$( cat /tmp/hwver )"
	fi

	# final
	if [ -n "$ASIC_MODEL" ]; then
		echo "$ASIC_MODEL"
	else
		echo '<unknown model>'
	fi
}

download_url () { #download from github
	echo "$url"
	echo "> Downloading $url"
	
	case "$ASIC_MODEL" in
		"Zig Z1+"|"Zig Z1")
			wget $url
			;;
		*)
			curl -L --insecure -O $url
			;;
	esac

	if [ $? -ne 0 ]; then
		echo "Error downloading $url"
		exit 1
	fi

	sleep 2
}

install_antminer_bmminer () { # bmminer, / - rw, cron
	download_url
	echo
	echo "> Extracting $filename"
	if [ ! -d /config/hive/hive-config ]; then
		mkdir -p /config/hive/hive-config
	fi
	tar -xzv -f "$filename"
	[ -L /hive ] && rm /hive
	rm -rf hiveos-asic-${release_version_to_install}/hive/sbin/teleconsole
	cp -rf hiveos-asic-${release_version_to_install}/hive /
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm "$filename"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib
	#[ -d /hive && ! -L /hive ] && mv -f /hive /config/hive/
	[ -d /hive-config ] && [ ! -L /hive-config ] && mv -f /hive-config /config/hive/


	if [ ! -e /hive-config ]; then
		#ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
	fi
	cp -rf /hive/share/S9/S69hive /etc/rcS.d/
	cp -rf /hive/share/S9/.profile /home/root/

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_cgminer () { # cgminer, / - ro, no cron
	download_url
	echo
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f "$filename"
	cp -rf hiveos-asic-${release_version_to_install}/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm "$filename"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep "### HIVE AUTORUN ###" /config/network.conf || grep "ln -s /config/hive/hive/ /hive" /config/network.conf; then
		echo "/config/network.conf skip"
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_Z9_cgminer () { # cgminer, / - rw, no cron
	download_url
	rm -rf /hive/sbin/teleconsole
	if [ -e /hive ] && [ ! -L /hive ]; then
		mkdir -p /config/hive
		mv -f /hive /config/hive/
		mv -f /hive-config /config/hive/
		mv -f /home/root/.profile /config/hive/home/root/
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi
	echo
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir /config/hive
	fi
	tar -xzv -f "$filename"
	rm -rf hiveos-asic-${release_version_to_install}/hive/sbin/teleconsole
	cp -rf hiveos-asic-${release_version_to_install}/* /config/hive/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm "$filename"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	if [ ! -e /hive ]; then
		ln -s /config/hive/hive/ /hive
		ln -s /config/hive/hive-config/ /hive-config
		ln -s /config/hive/home/root/.profile /home/root/.profile
	fi

	if grep "### HIVE AUTORUN ###" /config/network.conf || grep "ln -s /config/hive/hive/ /hive" /config/network.conf; then
		echo "/config/network.conf skip"
	else
		cat >> /config/network.conf <<FILEEOF

### HIVE AUTORUN ###
[ -e /config/hive_autorun ] && nohup /bin/sh -c '/config/hive_autorun' > /dev/null 2>&1 &
FILEEOF
	fi
	cp -rf /hive/bin/hive_autorun /config/hive_autorun
	/hive/bin/hive

	#on cgminer's antminer no cron daemon, run tasks in background
	nohup bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
	nohup bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_innosilicon () {
	download_url
	echo
	mount -o remount,rw,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs /
	echo "> Extracting $filename"
	if [ ! -d /config/hive ]; then
		mkdir -p /config/hive
	fi
	if [ ! -d /hive ]; then
		mkdir /hive
	fi
	tar -xzv -f "$filename"
	cp -rf hiveos-asic-${release_version_to_install}/hive-config /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/bin /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/etc /config/hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/sbin /hive/
	cp -rf hiveos-asic-${release_version_to_install}/hive/lib /hive/
	cp -rf hiveos-asic-${release_version_to_install}/home/root/.profile /etc/profile.d/hive.sh
	cp -rf hiveos-asic-${release_version_to_install}/hive/share/innosilicon/* /etc/systemd/system/
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm "$filename"

	sleep 2

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	[ ! -L /hive/bin ] && [ ! -e /hive/bin ] && ln -s /config/hive/bin /hive/bin
	[ ! -L /hive/etc ] && [ ! -e /hive/etc ] && ln -s /config/hive/etc /hive/etc
	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /config/hive/hive-config/ /hive-config
	[ ! -L /hive/sbin/nc ] && [ ! -e /hive/sbin/nc ] && ln -s /hive/sbin/busybox.nosuid /hive/sbin/nc

	#systemd autorun and cron
	systemctl daemon-reload
	systemctl is-enabled hive.service > /dev/null
	[ $? -eq 1 ] && systemctl enable hive.service
	systemctl start hive.service
	systemctl is-enabled hive-agent-screen.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-agent-screen.timer
	systemctl start hive-agent-screen.timer
	systemctl is-enabled hive-cache-ip.timer > /dev/null
	[ $? -eq 1 ] && systemctl enable hive-cache-ip.timer
	systemctl start hive-cache-ip.timer

	sleep 2
	nohup sync && sleep 600 && mount -o remount,ro,relatime,ubi=0,vol=0 -t ubifs ubi0:rootfs / &

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
	systemctl start hive.service
}

install_innosilicon_innominer () {
	download_url
	echo
	mount -o remount,rw,relatime -t jffs2 /dev/root /

	echo "> Extracting $filename"
	[ ! -d /hive ] && mkdir /hive
	tar -xzv -f "$filename"
	cp -rf hiveos-asic-${release_version_to_install}/hive-config /innocfg/
	cp -rf hiveos-asic-${release_version_to_install}/hive /
#	cp -rf hiveos-asic-${release_version_to_install}/home/root/.profile /etc/profile.d/hive.sh
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1
	rm "$filename"

	[ ! -L /hive-config ] && [ ! -e /hive-config ] && ln -s /innocfg/hive-config/ /hive-config

	#autorun
	if grep "### HIVE AUTORUN ###" /etc/init.d/rcS; then
		echo "/etc/init.d/rcS skip"
	else
		cat >> /etc/init.d/rcS <<FILEEOF

### HIVE AUTORUN ###
[ -e /hive/bin/hive ] && nohup /hive/sbin/bash -c 'sleep 30; /hive/bin/hive > /tmp/hive-boot.log; echo "Running hive..."' > /dev/null 2>&1 &
[ -e /hive/bin/hello ] && nohup /hive/sbin/bash -c 'sleep 40; /hive/bin/hello' > /dev/null 2>&1 &
[ -e /hive/bin/cron1 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron1' > /dev/null 2>&1 &
[ -e /hive/bin/cron2 ] && nohup /hive/sbin/bash -c 'sleep 60; /hive/bin/cron2' > /dev/null 2>&1 &
FILEEOF
	fi

	#PATH
	if grep "### HIVE PROFILE ###" /etc/profile; then
		echo "/etc/profile skip"
	else
		cat >> /etc/profile <<FILEEOF

### HIVE PROFILE ###
export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib
FILEEOF
	fi

	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	sync
	sleep 5
	mount -o remount,ro,relatime -t jffs2 /dev/root /

	/hive/bin/hive
	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_zig () {
	download_url
	echo
	echo "> Extracting $filename"
	tar -xzv -f "$filename"
#	rm -rf hiveos-asic-${release_version_to_install}/hive/sbin/teleconsole
	cp -rf hiveos-asic-${release_version_to_install}/* /
	[ $? -ne 0 ] && echo "Error extracting $filename" && exit 1

	rm "$filename"

	sleep 2

	ln -s /bin/busybox /bin/nc
	cp -rf /hive/share/zig/crontab.root /etc/cron.d/hive
	cp -rf /home/root/.profile /etc/profile.d/hive.sh
	/etc/init.d/cron restart
	apt update
	apt install -y curl screen jq
	sed -i 's/#!\/bin\/sh/#!\/bin\/bash/g' /hive/bin/selfupgrade
	export PATH=$PATH:/hive/bin:/hive/sbin
	export LD_LIBRARY_PATH=/hive/lib

	/hive/bin/hive

	sleep 2

	#$FARM_HASH can be defined externally
	bash -c "/hive/bin/firstrun $FARM_HASH"
}

install_antminer_bmminer_ro () {
	sync && echo 3 > /proc/sys/vm/drop_caches
	if ! cmp -s /etc/rcS.d/S69hive /hive/share/ant_15_17/S69hive; then
		cp -rf /hive/share/ant_15_17/S69hive /etc/rcS.d/S69hive
	fi
	[ -e /nvdata/latest_new.tar.gz ] && rm /nvdata/latest_new.tar.gz
	[ -e /hive ] && rm -rf /hive
	sync
	if [ "$github" -eq 1 ]; then
		curl -f -L --insecure "$url" -o /nvdata/latest.tar.gz
		/etc/rcS.d/S69hive
	else
		/etc/rcS.d/S69hive -f
	fi
	while [ ! -e /hive/sbin/ ]; do
		echo "> selfupgrade waiting for /hive/sbin/..."
		sleep 5
	done
	sleep 10
}


# code

print_script_version
if [ "_${1}_" = '_--help_' ] || [ "_${1}_" = '_-h_' ]; then
	print_script_usage
	exit 0
fi 

ASIC_MODEL="$( get_asic_model )"

# get remote versions
case "$ASIC_MODEL" in
	"Zig Z1+"|"Zig Z1")
		remote_release_version="$( wget -q -O- https://raw.githubusercontent.com/minershive/hiveos-asic/master/hive/etc/VERSION )"
		exitcode=$?
		remote_build_version="$( wget -q -O- https://raw.githubusercontent.com/minershive/hiveos-asic/master/hive/etc/build )"
		;;
	*)
		remote_release_version="$( curl -f --silent -L --insecure https://raw.githubusercontent.com/minershive/hiveos-asic/master/hive/etc/VERSION )"
		exitcode=$?
		remote_build_version="$( curl -f --silent -L --insecure https://raw.githubusercontent.com/minershive/hiveos-asic/master/hive/etc/build )"
		;;
esac

# get local versions
if [ -s /hive/etc/VERSION ]; then
	local_release_version="$( cat /hive/etc/VERSION )"
else
	local_release_version=0
fi

if [ -s /hive/etc/build ]; then
	local_build_version="$( cat /hive/etc/build )"
else
	local_build_version=0
fi

# show info
echo "ASIC model: $ASIC_MODEL"
echo "Hive latest version: ${remote_release_version}-$remote_build_version"
if [ "$local_release_version" = 0 ]; then
	echo "Local version: <not installed>"
else
	if [ "$local_build_version" = 0 ]; then
		echo "Local version: ${local_release_version}-release"
	else
		echo "Local version: ${local_release_version}-${local_build_version}"
	fi
fi

if [ "$exitcode" -ne 0 ] || [ -z "$remote_release_version" ]; then
	echo
	echo "ERROR: Can't get current version from repository. Check your internet connection."
	exit $exitcode
fi

# scenario 1: 'selfupgrade'
# scenario 2: 'selfupgrade --force'
# scenario 3: 'selfupgrade 0.1-12'
# scenario 4: 'selfupgrade 0.1-12 --force'
# scenario 5: 'selfupgrade master'
# scenario 6: 'selfupgrade master github'
# scenario 7: 'selfupgrade master dev357'

dont_have_to_update=0
force=0
github=0
master=0
user_defined_version=

# parse arguments
if [ $# -ne 0 ]; then
	if [ "$1" = 'master' ]; then
		master=1
		# check for master github or master devNNN
		case "$2" in
			github)
				github=1
			;;
			"${local_build_version}")
				dont_have_to_update=1
			;;
		esac
	else
		if [ "_${1}_" = '_-f_' ] || [ "_${1}_" = '_--force_' ]; then
			force=1
		else
			case "$1" in
				*.*-*)
					user_defined_version="$1"
					if [ "_${2}_" = '_-f_' ] || [ "_${2}_" = '_--force_' ]; then
						force=1
					fi
				;;
				*)
					dont_have_to_update=1
				;;
			esac
		fi
	fi
fi

# take decisions
if [ "$master" -eq 1 ]; then
	echo 'WARNING: master mode, using dev build'
	if [ "$github" -eq 1 ]; then
		echo "WARNING: using latest night build from Github"
	fi
	release_version_to_install='master'
	filename='master.tar.gz'
elif [ -n "$user_defined_version" ]; then
	if [ "$user_defined_version" = "$local_release_version" ]; then
		dont_have_to_update=1
	fi
	release_version_to_install="$user_defined_version"
	filename="v${release_version_to_install}.tar.gz"
else
	if [ "$local_release_version" = "$remote_release_version" ]; then
		# there's no new version
		dont_have_to_update=1
	fi
	release_version_to_install="$remote_release_version"
	filename="v${release_version_to_install}.tar.gz"
fi

if [ "$dont_have_to_update" = 1 ]; then
	if [ "$force" -eq 1 ]; then
		echo "Update to version: $release_version_to_install (forced)"
	else
		echo
		echo -e "${GREEN}Hive is up to date already${NOCOLOR}"
		echo
		echo -e "Hint: you can run ${CYAN}selfupgrade --force${NOCOLOR} or ${CYAN}selfupgrade 0.1-13 --force${NOCOLOR} to force update"
		echo
		exit $exitcode
	fi
else
	echo "Update to version: $release_version_to_install"
fi

url="http://github.com/minershive/hiveos-asic/archive/${filename}"

t=$( df -h | grep  '/tmp' | awk '{print $NF}' )
[ -z "$t" ] && t='/tmp'
cd "$t"

# some cleaning
echo
echo -n '> Cleaning: '
for file_to_remove in /tmp/hive/* /tmp/hiveos-asic* /tmp/selfupgrade /tmp/master.tar.gz /tmp/v*.tar.gz "$filename" /hive/etc/build; do
	if [ -e "$file_to_remove" ]; then
		echo -n "$file_to_remove"
		rm -rf "$file_to_remove" || echo -n ' (FAIL)'
		echo -n ' '
	fi
done
echo

rm -rf /tmp/hive/* /tmp/hiveos-asic* /tmp/selfupgrade /tmp/master.tar.gz /tmp/v*.tar.gz /hive/etc/build
[ -f "$filename" ] && rm "$filename"

# let's go
echo
echo -n '> Installing '

case "$ASIC_MODEL" in

	# Antminer, exact match

	"Antminer A3"|		\
	"Antminer D3"|		\
	"Antminer DR3"|		\
	"Antminer L3++"|	\
	"Antminer S7"|		\
	"Antminer X3")		echo "$ASIC_MODEL";		install_antminer_cgminer	;;

	"Antminer E3"|		\
	"Antminer S9 Hydro"|	\
	"Antminer S9"|		\
	"Antminer S9i"|		\
	"Antminer S9j"|		\
	"Antminer S11"|		\
	"Antminer T9"|		\
	"Minecenter S9")	echo "$ASIC_MODEL";		install_antminer_bmminer	;;

	"Antminer S9 SE"|	\
	"Antminer S9k"|		\
	"Antminer S15"|		\
	"Antminer T15"|		\
	"Antminer X17")		echo "$ASIC_MODEL";		install_antminer_bmminer_ro	;;

	"Antminer Z9-Mini")	echo "$ASIC_MODEL";		install_antminer_Z9_cgminer	;;

	"Antminer ")		echo "Antminer B3";		install_antminer_bmminer	;;

	# Antminer, partial match

	"Antminer D3 Blissz"*)	echo "Antminer D3 Blissz";	install_antminer_cgminer	;;
	"Antminer L3+"*)	echo "Antminer L3+";		install_antminer_cgminer	;;
	"Antminer S9 (vnish"*)	echo "Antminer S9 vnish";	install_antminer_bmminer	;;
	"Antminer S9"*)		echo "Antminer S9";		install_antminer_bmminer	;;
	"Antminer S10"*)	echo "Antminer S10";		install_antminer_bmminer	;;
	"Antminer S17"*)	echo "Antminer S17";		install_antminer_bmminer_ro	;;
	"Antminer T9+"*)	echo "Antminer T9+";		install_antminer_bmminer	;;
	"Antminer T9"*)		echo "Antminer T9";		install_antminer_bmminer	;;
	"Antminer T17"*)	echo "Antminer T17";		install_antminer_bmminer_ro	;;
	"Antminer Z9"*)		echo "Antminer Z9";		install_antminer_Z9_cgminer	;;
	"Antminer Z11"*)	echo "Antminer Z11";		install_antminer_Z9_cgminer	;;

	# Innosilicon

	"b29+.g19")		echo "Innosilicon A9";		install_innosilicon		;;
	"d9.g19")		echo "Innosilicon D9";		install_innosilicon		;;
	"s11.g19")		echo "Innosilicon S11";		install_innosilicon		;;
	"t3.soc")		echo "Innosilicon T3";		install_innosilicon		;;
	"t3+.soc")		echo "Innosilicon T3+";		install_innosilicon		;;
	"t2thm.soc")		echo "Innosilicon T2Thm";	install_innosilicon		;;
	"t2thf.soc")		echo "Innosilicon T2Thf";	install_innosilicon		;;
	"t2th.soc")		echo "Innosilicon T2Th";	install_innosilicon		;;
	"t2tz.soc")		echo "Innosilicon T2Tz-30T";	install_innosilicon		;;
	"t2t.soc")		echo "Innosilicon T2T-24T";	install_innosilicon		;;
	"t2t+.soc")		echo "Innosilicon T2T+(32T)";	install_innosilicon		;;
	"t2th+.soc")		echo "Innosilicon T2TH+";	install_innosilicon		;;
	"t2thf+.soc")		echo "Innosilicon T2THf+";	install_innosilicon		;;
	"t2thl+.soc")		echo "Innosilicon T2THl+";	install_innosilicon		;;
	"t2ts.soc")		echo "Innosilicon T2Ts-26T";	install_innosilicon		;;
	"t2ti.soc")		echo "Innosilicon T2Ti-25T";	install_innosilicon		;;
	"t3h+.soc")		echo "Innosilicon T3H+";	install_innosilicon		;;
	"T4.G19")		echo "Innosilicon A8";		install_innosilicon_innominer	;;

	# Zig

	"Zig Z1+"|"Zig Z1")	echo "$ASIC_MODEL"; 		install_zig;;

	# unknown

	*)
		echo "'$ASIC_MODEL'"
		echo
		echo 'ERROR: model not supported'
		echo
		echo 'Please contact us: https://t.me/hiveonasic_en'
		echo '                   https://t.me/hiveonasic'
		echo '                   bee@hiveos.farm'
		exit 1
		;;
esac

echo

#Don't restart it...
#echo -e "> Saying hello to server again"
#hello restartminer

rm -rf /tmp/hiveos-asic*

agent-screen restart

echo -e "${GREEN}Upgrade complete. Have a happy mining.${NOCOLOR}"

sync

exit 0