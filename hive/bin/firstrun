#!/hive/sbin/bash
#Checks if config exists, ask for rig if no config found
export PATH=$PATH:/hive/bin:/hive/sbin
export LD_LIBRARY_PATH=/hive/lib


HELLO_OK="/tmp/.hive-hello-ok"
RIG_CONF="/hive-config/rig.conf"
mkdir -p "/hive-config"

[ -t 1 ] && . colors


#FARM_HASH=
FORCE=0
if [[ "$1" == "-f" ]]; then
	echo "Forcing reconfig"
	FORCE=1
elif [[ ! -z "$1" ]]; then
	FARM_HASH="$1"
#	if [[ "$2" == "-f" ]]; then
	FORCE=1
#	fi
fi


#eval `cat /hive-config/rig.conf | dos2unix | grep '^HIVE_HOST_URL='`

# read, check (rough sanity check) and set HIVE_HOST_URL
# 
# todo: connectivity test
# todo: valid api answer test (curl -v $url/worker/api?a=b)

HIVE_HOST_URL_default='http://api.hiveos.farm'
HIVE_HOST_URL_file='/config/HIVE_HOST_URL'

sanitize_HIVE_HOST_URL() {
	(( $# < 1 && $# > 2 )) && echo "Error in ${FUNCNAME}(): Invalid number of arguments" 1>&2
	#
	# sanitize_HIVE_HOST_URL 'url_to_sanitize' ['fallback_url'] -> 'sanitized_url'
	#
	# exit code: is_fallback_happen
	#
	local -r url_to_sanitize="$1"
	local -r fallback_url="${2:-${HIVE_HOST_URL_default}}"
	local -r valid_url_RE='^(http|https)://[[:alnum:]\.\-]+(:[[:digit:]]{1,5})?' # first line w/o control chars (only alnum|punct), starting with http(s)://
	local sanitized_url=''
	local -i is_fallback_happen=0

	if [[ $url_to_sanitize =~ $valid_url_RE ]]; then
		# URL seems ok, use it
		sanitized_url="$BASH_REMATCH"
		is_fallback_happen=0
	else
		# something wrong, falling back to default
		sanitized_url="$fallback_url"
		is_fallback_happen=1
	fi

	echo "$sanitized_url"

	return $(( is_fallback_happen ))
}

validate_and_set_HIVE_HOST_URL() {
	(( $# != 1 )) && echo "Error in ${FUNCNAME}(): Invalid number of arguments" 1>&2
	#
	# validate_and_set_HIVE_HOST_URL 'url_to_validate_and_set'
	#
	# sets: $HIVE_HOST_URL
	#
	local -r url_to_validate_and_set="$1"
	local validated_url=''

	if validated_url="$( sanitize_HIVE_HOST_URL "$url_to_validate_and_set" )"; then
		echo "URL seems ok. Hive Server URL have been set to $validated_url"
	else
		echo "Something wrong with '$url_to_validate_and_set'. Falling back to default: $validated_url"
	fi
	HIVE_HOST_URL="$validated_url"
}

# try to read it from environment
if [[ -n "$HIVE_HOST_URL" ]]; then
	echo -n "HIVE_HOST_URL variable is set, checking... "
	validate_and_set_HIVE_HOST_URL "$HIVE_HOST_URL"
else
	HIVE_HOST_URL="$HIVE_HOST_URL_default"
	echo "HIVE_HOST_URL variable is not set. Using default Hive Server URL: $HIVE_HOST_URL"
fi

# try to read it from file
if [[ -s "$HIVE_HOST_URL_file" ]]; then
	echo -n "File '$HIVE_HOST_URL_file' found, checking... "

	HIVE_HOST_URL_from_file="$( < "$HIVE_HOST_URL_file" )"

	validate_and_set_HIVE_HOST_URL "$HIVE_HOST_URL_from_file"
	rm "$HIVE_HOST_URL_file"
fi



BRANDING_LOGO="
 _______ _______ ___ ___ _______
|   |   |_     _|   |   |    ___|
|       |_|   |_|   |   |    ___|
|___|___|_______|\_____/|_______|

"
BRANDING_LOGO="${BYELLOW}${BRANDING_LOGO}${NOCOLOR}"

if [[ ! -f "$RIG_CONF" ]] || [[ "$FORCE" -eq 1 ]]; then
#	selfupgrade

	if [[ -z $FARM_HASH ]]; then
		msg=$(cat <<EOF
${BRANDING_LOGO}
$CYAN
Welcome to Miners Hive.
This is your first boot, no config found at "$RIG_CONF".
Please add your rig in your profile on the web, set the name and password for it.
Then get rig id and give it to me.

$NOCOLOR
EOF
)
	else
		msg=$(cat <<EOF
${BRANDING_LOGO}
$CYAN
Adding worker to your farm...${NOCOLOR}
Hive Farm Hash (FARM_HASH) is '${FARM_HASH:-<not set>}'
Hive Server URL (HIVE_HOST_URL) is '${HIVE_HOST_URL:-<not set>}'

$NOCOLOR
EOF
)
	fi


	echo -e "$msg"
elif [[ ! -f "$HELLO_OK" ]]; then
	msg=$(cat <<EOF
${BRANDING_LOGO}
$YELLOW
Config "$RIG_CONF" exists but during boot the connection to hive server failed.
Either the server or your network is temporary down.
If you have changed the password for this rig, then you need to enter credentials again.$NOCOLOR
Run ${CYAN}hello${NOCOLOR} to try again. Or run ${CYAN}firstrun -f${NOCOLOR} to enter new ID and password.
$NOCOLOR
EOF
)
	echo -e "$msg"

	sleep 5

	echo "Trying to say hello again...";
	hello

	exit 0

else
	exit 0
fi






url=
id=
passwd=

read_url () {
	while true; do
		read url
		[[ -z $url ]] && break
		[[ $url =~ ^(http|https)://.+$ ]] &&
			HIVE_HOST_URL=$url &&
			echo -e "New server URL: ${YELLOW}$HIVE_HOST_URL${NOCOLOR}" &&
			break
		echo "Invalid URL"
	done
}

read_id () {
	while true; do
		echo -n "RIG ID: "
		read id
		echo "$id" | grep -qE '^[0-9]+$' && break
		echo "Invalid input"
	done
}

read_passwd () {
	while true; do
		echo -n "Password: "
		read passwd
		#any chars no spaces
		#[[ ! $passwd =~ [[:blank:]] ]] && break
		#[[ ! "$passwd" =~ \"|\'|[[:blank:]] ]] && break #if does not match \" or \' space - break cycle
		echo "$passwd" | grep -qE "\"|'|\s" || break
		echo "Invalid input \"$passwd\""
	done
}



while true; do
	if [[ -z $FARM_HASH ]]; then
		echo -e "Server URL: ${YELLOW}$HIVE_HOST_URL${NOCOLOR}"
		echo "Press ENTER to continue with this URL or type a new one"
		read_url

		read_id
		read_passwd

		cat > $RIG_CONF <<FILEEOF
HIVE_HOST_URL="$HIVE_HOST_URL"
RIG_ID="$id"
RIG_PASSWD="$passwd"
FILEEOF
	else #$FARM_HASH is set
		cat > $RIG_CONF <<FILEEOF
HIVE_HOST_URL="$HIVE_HOST_URL"
FARM_HASH="$FARM_HASH"
FILEEOF
	fi

	sync
	echo ""
	echo "Config written to \"$RIG_CONF\"."

	#try to connect
	sleep 5
	hello restartminer

	if [ $? -eq 0 ]; then
		#Apply OC if configs are available
		#[[ -f $AMD_OC_CONF ]] && amd-oc-safe
		#[[ -f $NVIDIA_OC_CONF ]] && nvidia-oc-log

		echo -e "\n${BGREEN}Login OK. Happy mining!${NOCOLOR}\n"
		exit 0
	fi

	echo -e "${RED}Sorry, id and password did not work, check and try again${NOCOLOR}\n"

	if [[ ! -z $FARM_HASH ]]; then
		#break while loop
		exit 1
	fi

done



