#!/usr/bin/env bash

readonly script_mission='Antminer Series 15/17 Error Report'
readonly script_version='1.13'
readonly DEBUG=0


#
# strict mode, no unbound variables
#

set -o nounset


# args

declare -i -r days_to_look_back="${1:-14}" # default to 14 days


# consts

. colors
readonly script_basename="$( basename "$0" )"
readonly log="/tmp/$( basename "$0" ).log"
readonly logs_dir='/nvdata'
readonly first_column_template='%-25.25s'
readonly zero_symbol='-'
readonly domains_of_interest=':set_miner_status|:check_miner_status|stop_mining|power off|update_fan_status: Error'
readonly domain_prefix='<DOMAIN> '


declare -A view_settings=(
	[wide.printf]='%4.4s'
	[wide.date]='2'
	[wide.margin]='20'

	[normal.printf]='%3.3s'
	[normal.date]='2'
	[normal.margin]='26'

	[compact.printf]='%1.1s'
	[compact.date]='1'
	[compact.margin]='38'
)

if (( days_to_look_back >= ${view_settings[compact.margin]} )); then
	view='compact'
elif (( days_to_look_back >= ${view_settings[normal.margin]} )); then
	view='normal'
else
	view='wide'
fi


readonly data_column_template="${view_settings[${view}.printf]}"
readonly date_positions="${view_settings[${view}.date]}"


# arrays

declare -a log_events=()
declare -a last_days_calendar=()
declare -A events_data=()
declare -a error_domains=() # ( f.e. 'check_asic_number_with_power_on:' 'killall_hashboard:' 'set_miner_status:' 'stop_mining:' 'stop_mining_and_reboot:' )


# functions

print_script_version() {
	echo -e "${CYAN-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

intro() {
	printf '%(%F %T)T Report for the last %d days, %s view\n\n' -1 "$days_to_look_back" "$view"
}

create_calendar() {
	local -i current_day_in_seconds=0
	local current_day_in_yymmdd=''

	printf -v current_day_in_seconds '%(%s)T' # unix time of now

	for (( i=0; i < days_to_look_back; i++ )); do
		printf -v current_day_in_yymmdd '%(%F)T' "$current_day_in_seconds" # convert unix time to yy-mm-dd
		last_days_calendar+=( "$current_day_in_yymmdd" ) # add date to array
		(( current_day_in_seconds -= 24 * 60 * 60 )) # get 24h back
	done

	if (( DEBUG )); then
		printf 'DEBUG> last_days_calendar array: '
		printf '[%s] ' "${last_days_calendar[@]}"
		printf '\n\n'
	fi
}

check_log() {
	
	if [[ ! -d "$logs_dir" ]]; then
		echo "$logs_dir not found. Is it Antminer Series 15/17?"
		echo
		echo "Other files are:"
		ls -l /
		exit 100
	fi
}

check_for_1970() {
	find "${logs_dir}/1970-01/" -name log -type f -mtime "-${days_to_look_back}" -print |
		grep -q '.' && {
			echo "${RED}WARNING: Recently updated logs from 1970 year are found, check host time settings (ntpd)${NOCOLOR}"
			echo
			}
}

get_filtered_log() {
	local -r files_to_grep="$( find "$logs_dir" '/var/log/' -name log -type f )"

	# WARNING: debug is extremely slow (20-30 minutes) on arm machines.
	if (( DEBUG )); then
		echo -n "DEBUG> 'log' files found: "
		wc -l -- <<< "$files_to_grep"

		echo -n "DEBUG> Number of lines: "
		cat -- $files_to_grep | tee "${script_basename}.debug.0" | wc -l

		echo -n "DEBUG> Number of unique lines: "
		cat -- "${script_basename}.debug.0" | sort -su | tee "${script_basename}.debug.1" | wc -l

		echo -n "DEBUG> Number of unique lines with timestamp: "
		cat -- "${script_basename}.debug.1" | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2} ' | tee "${script_basename}.debug.2" | wc -l

		echo -n "DEBUG> Number of lines for the last $days_to_look_back days: "
		grep -hF -f <( printf '%s\n' "${last_days_calendar[@]}" ) -- "${script_basename}.debug.2" | tee "${script_basename}.debug.3" | wc -l
	fi

	grep -hF -f <( printf '%s\n' "${last_days_calendar[@]}" ) -- $files_to_grep |
			grep -E "$domains_of_interest" | sed 's@driver/@@' | sed 's@\.c:[0-9]\+:@\.c:@' | sort -su > "$log"
}

get_unique_events_from_log() {
	# 2020-03-09 18:39:32 driver/fan.c:59:update_fan_status: Error, fan lost, only find 3 (< 8)
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 0, fan_speed = 6000
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 1, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 2, fan_speed = 5640
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 3, fan_speed = 5880
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 4, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 5, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 6, fan_speed = 0
	# 2020-03-09 18:39:32 driver/fan.c:62:update_fan_status: fan_id = 7, fan_speed = 0
	# 2020-03-09 18:39:32 driver/driver-btm-api.c:175:set_miner_status: ERROR_FAN_LOST
	# 2020-03-09 18:39:38 driver/driver-btm-api.c:622:killall_hashboard: ****power off hashboard****

	# date       time     file                    num function     method       message
	# 2020-03-09 18:39:38 driver/driver-btm-api.c:137:stop_mining: stop mining: fan lost
	# ^^^^^^^^^^ ^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^^
	# f1         f2       f3                                       f4           f5

	local unique_events=''

	readarray -t error_domains < <( cat "$log" | cut -d ' ' -f 3 | sort -su )  # get list of error types (unique)

	if (( DEBUG )); then
		printf 'DEBUG> error domains: '
		printf '[%s] ' "${error_domains[@]}"
		printf '\n\n'
	fi

	for error_domain in "${error_domains[@]}"; do
		log_events+=( "${domain_prefix}${error_domain#*:}" )
		readarray -t -O "${#log_events[@]}" log_events < <( grep -F -e "$error_domain" -- "$log" | cut -d ' ' -f 4- | sort -su )  # get list of events (unique)
		if (( DEBUG )); then
			echo "Domain: '$error_domain' (${#log_events[@]})"
		fi
	done

	if (( DEBUG )); then
		printf 'DEBUG> log events: '
		set | grep log_events= | grep -v grep
		#printf '[%s] ' "${log_events[@]}"
		printf '\n\n'
	fi
}

print_table_header() {
	local today
	local date_category
	local this_date
	local -i this_day

	printf -v today '%(%F)T'

	for date_category in year month day; do

		# print 1st column header only on 2nd line
		case "$date_category" in
			year)
				printf "${first_column_template}" '                        y'
				;;
			month)
				printf "${first_column_template}" 'Events by date          m'
				;;
			day)
				printf "${first_column_template}" '                        d'
				;;
		esac

		for (( this_day=days_to_look_back-1 ; this_day >= 0 ; this_day-- )); do
			this_date="${last_days_calendar[this_day]}"
			case "$date_category" in
				year)
					text=${this_date:2:2}	# 2020-01-01
					;;
				month)
					text=${this_date:5:2}	#   ^^ ^^ ^^
					;;
				day)
					text=${this_date:8:2}	# 0123456789
					;;
			esac

			text="${text}"

			if [[ "$text" != "${previous_text-}" ]]; then
				if [[ $this_date == $today ]]; then # highlight current date
					printf "%b${data_column_template}%b" "${WHITE}" "${text: -${date_positions}}" "${NOCOLOR}"
				else
					printf "%b${data_column_template}%b" "${GRAY}" "${text: -${date_positions}}" "${NOCOLOR}"
					#printf "${data_column_template}" "${text: -${date_positions}}"
				fi
			else
				printf "%b${data_column_template}%b" "${DGRAY}" "${text: -${date_positions}}" "${NOCOLOR}"
			fi
			previous_text="$text" # save for next iteration
		done

		echo
	done
}

calculate_data() {
	local date_to_process

	local this_event
	local this_event_RE
	local -i this_day=0
	local -i this_event_counter=0
	local -i this_event_total=0

	local -i problem_days_count=0
	local -i all_events_total=0

	for this_event in "${log_events[@]}"; do
		for (( this_day=0 ; this_day < days_to_look_back ; this_day++ )); do
			date_to_process="${last_days_calendar[this_day]}"
			#this_event_RE="${date_to_process}.*${this_event}"
			this_event_counter="$( grep -F "$date_to_process" "$log" | grep -F -c "$this_event" )" # tenfold faster than bash matching

			events_data["${this_event}.${this_day}"]="$this_event_counter"

			(( this_event_total += this_event_counter ))
			if (( this_event_counter > 0 )); then
				(( problem_days_count++ ))
			fi
		done

		events_data["${this_event}.total"]=$(( this_event_total ))
		events_data["${this_event}.avg.per_day.x100"]=$(( (this_event_total*100) / (days_to_look_back) )) # x100 for fixed point
		events_data["${this_event}.avg.per_problem_day.x100"]=$(( problem_days_count > 0 ? (this_event_total*100) / (problem_days_count) : 0 )) # x100 for fixed point

		(( all_events_total += this_event_total ))

		this_event_total=0
		problem_days_count=0
	done

	events_data['#all.total']=$(( all_events_total ))
}

print_table_body() {
	local event_name=''
	local event_name_for_display=''
	local -i event_is_domain_name=0

	local -i this_day=0
	local -i event_counter=0
	local event_counter_for_display=''

	local display_color=''
	local -i avg_per_day_x100=0
	local -i avg_per_problem_day_x100=0

	# dictionaries

	local -A event_name_translator=( # dictionary: event regex -> event transforming template. %1..9% for (group number)
		['Chain ([0-9]+) only find ([0-9]+) asic, will power off hash board ([0-9]+)']='Board %3% off (%2% asic)'
		["Can't get temperature sensor type"]='temp sensor fail'
		['stop mining: (.+)']='%1%'
		['\*\*\*\*(power off hashboard)\*\*\*\*']='%1%'
		['Error, fan lost, only find ([0-9]+) \((..[0-9]+)\)']='Only %1% fan found (%2%)'
	)

	# code

	for event_name in "${log_events[@]}"; do
		if [[ "$event_name" =~ $domain_prefix ]]; then
			event_is_domain_name=1
		else
			event_is_domain_name=0
		fi
		
		if (( event_is_domain_name )); then
			#event_name_for_display="-${event_name#${domain_prefix}}------------------------"
			event_name_for_display="${event_name#${domain_prefix}}"
			display_color="${GRAY}"
		else
			avg_per_day_x100="${events_data[${event_name}.avg.per_day.x100]}"
			avg_per_problem_day_x100="${events_data[${event_name}.avg.per_problem_day.x100]}"

			#if (( (avg_per_problem_day_x100/10) >= (${events_data['#all.total']}/days_to_look_back) )); then
			#	display_color="${BRED}"
			#else
			#	display_color="${NOCOLOR}"
			#fi

			# transform event name to simplified form
			event_name_for_display="$event_name"
			for event_RE in "${!event_name_translator[@]}"; do # for each RE in dictionary
				event_template="${event_name_translator[${event_RE}]}" # get a transforming template
				#printf 'DEBUG: %s = %s\n' "${event_RE}" "${event_template}"
				if [[ $event_name =~ $event_RE ]]; then
					for (( rematch_counter=1; rematch_counter < ${#BASH_REMATCH[@]}; rematch_counter++ )); do
						event_template="${event_template//%${rematch_counter}%/${BASH_REMATCH[$rematch_counter]}}"
					done
					event_name_for_display="$event_template"
					break
				fi
			done
			display_color="${NOCOLOR}"
		fi

		printf "%b${first_column_template}%b" "$display_color" "$event_name_for_display" "${NOCOLOR}"

		for (( this_day=days_to_look_back-1 ; this_day >= 0 ; this_day-- )); do
			if (( event_is_domain_name )); then
				display_color='' # "${GRAY}"
				event_counter_for_display='' # '------------------------'
			else
				event_counter="${events_data[${event_name}.${this_day}]}"

				if (( event_counter == 0 )); then
					display_color="${DGRAY}"
					event_counter_for_display="$zero_symbol"
				elif (( (event_counter*100) > avg_per_problem_day_x100 )); then
					# paint the value in red if it's greater than the day average for this event
					display_color="${BRED}"
					event_counter_for_display="$event_counter"
				else
					# ordinary value
					display_color="${NOCOLOR}"
					event_counter_for_display="$event_counter"
				fi
			fi

			if [[ $view == 'compact' && "$event_counter" -ne 0 ]]; then
				event_counter_for_display='+'
			fi

			printf "%b${data_column_template}%b" "$display_color" "$event_counter_for_display" "${NOCOLOR}"
		done

#		# totals column
#		this_event_total="${events_data["${event_name}.total"]}"
#		printf "   %5d %5d %5d" "$this_event_total" "$avg_per_day_x100" "$avg_per_problem_day_x100"
#		printf ' %7.1f' "$(( 10**9 * ${accumulator[$event_name]} / days_to_look_back ))e-9" # yay, neat trick
		echo
	done
}

print_stats() {
	printf "\n%d events in %d days\n" "${events_data['#all.total']}" "$days_to_look_back"
}


# code

print_script_version
intro

check_log

create_calendar
get_filtered_log
get_unique_events_from_log

calculate_data

print_table_header
print_table_body
print_stats
check_for_1970
